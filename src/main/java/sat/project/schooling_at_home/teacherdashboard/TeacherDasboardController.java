package sat.project.schooling_at_home.teacherdashboard;

import javax.annotation.Resource;

import org.apache.tomcat.jni.FileInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import sat.project.schooling_at_home.emailservice.EmailServiceImpl;
import sat.project.schooling_at_home.security.ERole;
import sat.project.schooling_at_home.security.Role;
import sat.project.schooling_at_home.security.RoleRepository;
import sat.project.schooling_at_home.security.User;
import sat.project.schooling_at_home.security.UserRepository;
import sat.project.schooling_at_home.student.Student;
import sat.project.schooling_at_home.student.StudentModel;
import sat.project.schooling_at_home.teacher.Teacher;
import sat.project.schooling_at_home.teacher.TeacherModel;
import springfox.documentation.service.ResponseMessage;

import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;

import com.google.common.net.HttpHeaders;

@RestController
@RequestMapping(path = "/teacherdashboard")

public class TeacherDasboardController {
	
	
	@Autowired
	EmailServiceImpl emailService;
	
	@Autowired
	UserRepository userRepository;
	
	
	@Autowired
	RoleRepository roleRepository; 
	
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	
private TeacherDashboardService teacherdashboardService;
	@GetMapping(path = "/allStudentsByDepartment")
	public Iterable<Student>getAllStudentsByDepartment(@RequestParam(name="department")String departmentname){
		return teacherdashboardService.getAllStudentsByDepartment(departmentname);
	}
	
	
	@GetMapping (path = "/allStudents")
	public  Iterable<Student> getAllStudents(){
		// This returns a JSON or XML with the users
	return teacherdashboardService.getAllStudents();
	}
	
	@PostMapping(path="/upload")
	public void uploadFile(@RequestParam("file") MultipartFile file) {
		System.out.println(file);
//	    String message = "";
//	    try {
//	    	teacherdashboardService.save(file);
//
//	      message = "Uploaded the file successfully: " + file.getOriginalFilename();
//	      return ResponseEntity.status(HttpStatus.OK).body(new ResponseMessage(message));
//	    } catch (Exception e) {
//	      message = "Could not upload the file: " + file.getOriginalFilename() + "!";
//	      return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(new ResponseMessage(message));
//	    }
	  }
//	 @GetMapping("/files")
//	  public ResponseEntity<List<FileInfo>> getListFiles() {
//	    List<FileInfo> fileInfos = teacherdashboardService.loadAll().map(path -> {
//	      String filename = path.getFileName().toString();
//	      String url = MvcUriComponentsBuilder
//	          .fromMethodName(FilesController.class, "getFile", path.getFileName().toString()).build().toString();
//
//	      return new FileInfo(filename, url);
//	    }).collect(Collectors.toList());
//
//	    return ResponseEntity.status(HttpStatus.OK).body(fileInfos);
//	  }
//
//	  @GetMapping("/files/{filename:.+}")
//	  @ResponseBody
//	  public ResponseEntity<Resource> getFile(@PathVariable String filename) {
//	    Resource file = teacherdashboardService.load(filename);
//	    return ResponseEntity.ok()
//	        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + file.getFilename() + "\"").body(file);
//	  }
//	
//	
	@PostMapping(path="/addStudent") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  addNewStudent ( @RequestBody StudentModel Student)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

	    Student studentEntity = new Student();
	    studentEntity.setName(Student.getName());
	    studentEntity.setDob(Student.getDob());
	    studentEntity.setAddress(Student.getAddress());
	    studentEntity.setGender(Student.getGender());
	    studentEntity.setDepartment(Student.getDepartment());
	    studentEntity.setCourse(Student.getCourse());
	    studentEntity.setFname(Student.getFname());
	    studentEntity.setFnumber(Student.getFnumber());
	    studentEntity.setMname(Student.getMname());
	    studentEntity.setMnumber(Student.getMnumber());
	    studentEntity.setBloodgroup(Student.getBloodgroup());
	    studentEntity.setEmailid(Student.getEmail());
	    
	    teacherdashboardService.saveStudents(studentEntity);
	    //save student and create an entry in the user table (for authentication), 
	    //send an email with the pssword
	    Random rand = new Random(); 
	   Integer autoPass= rand.nextInt(5000); 
	    emailService.sendSimpleMessage(Student.getEmail(), Student.getName()+" ,Important information of your profile creation","Your password to SAT for the depratment " +Student.getDepartment().getDepartment()+  " is: " + autoPass +" and username:"+Student.getEmail());
	   User user = new User();
	   user.setEmail(Student.getEmail());
	   user.setPassword(autoPass.toString());
	   user.setUsername(Student.getEmail());
	   Set<Role> roles= new HashSet<>();
	   Role role = roleRepository.findByName(ERole.ROLE_STUDENT).get();
	   roles.add(role);
	   user.setRoles(roles);
	   userRepository.save(user);
	    return new ResponseEntity<String>(HttpStatus.OK);
	  }

	@PutMapping(path="/editStudent") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  editStudent ( @RequestBody StudentModel student)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

	    
		teacherdashboardService.editStudents(student);
	   
	    return new ResponseEntity<String>(HttpStatus.OK);
	  }
}


