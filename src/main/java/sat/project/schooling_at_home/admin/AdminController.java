package sat.project.schooling_at_home.admin;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import sat.project.schooling_at_home.Courses.CourseModel;
import sat.project.schooling_at_home.Courses.Courses;
import sat.project.schooling_at_home.department.DepartmentModel;
import sat.project.schooling_at_home.department.Teacher_Department;
import sat.project.schooling_at_home.designaion.DesignationModel;
import sat.project.schooling_at_home.designaion.Teacher_Designation;
import sat.project.schooling_at_home.emailservice.EmailServiceImpl;
import sat.project.schooling_at_home.security.ERole;
import sat.project.schooling_at_home.security.Role;
import sat.project.schooling_at_home.security.RoleRepository;
import sat.project.schooling_at_home.security.User;
import sat.project.schooling_at_home.security.UserRepository;
import sat.project.schooling_at_home.teacher.Teacher;
import sat.project.schooling_at_home.teacher.TeacherModel;

@RestController
@RequestMapping(path = "/admin")
public class AdminController {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private AdminService adminService;
	
	
	@Autowired
	EmailServiceImpl emailService;
	
	@Autowired
	UserRepository userRepository;
	
	
	@Autowired
	RoleRepository roleRepository; 

	@GetMapping(path = "/allTeachers")
	public @ResponseBody Iterable<Teacher> getAllTeacher() {
		// This returns a JSON or XML with the users
		return adminService.getAllTeachers();
	}
	@PostMapping(path="/addTeacher") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  addNewTeacher ( @RequestBody TeacherModel teacher)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

		if(!userRepository.findByUsername(teacher.getEmail()).isEmpty()) {
			// ErrorRes error = new ErrorResponse("Validation Failed", "Username already exist");
		        return new ResponseEntity("Email is already registered", HttpStatus.BAD_REQUEST);
		}
	    Teacher teacherEntity = new Teacher();
	    teacherEntity.setFirst_name(teacher.getFirst_name());
	    teacherEntity.setLast_name(teacher.getLast_name());
	    teacherEntity.setDepartment(teacher.getDepartment());
	    teacherEntity.setDesignation(teacher.getDesignation());
	    teacherEntity.setEmail(teacher.getEmail());
	    
	    adminService.saveTeachers(teacherEntity);
	    
	    //save student and create an entry in the user table (for authentication), 
	    //send an email with the pssword
	    Random rand = new Random(); 
	   Integer autoPass= rand.nextInt(5000); 
	    emailService.sendSimpleMessage(teacherEntity.getEmail(), teacherEntity.getFirst_name()+" ,Important information of your profile creation","Your password to SAT for the depratment " +teacherEntity.getDepartment().getDepartment()+  " is: " + autoPass+ " and username:"+teacherEntity.getEmail());
	   User user = new User();
	   user.setEmail(teacherEntity.getEmail());
	   user.setPassword(autoPass.toString());
	   user.setUsername(teacherEntity.getEmail());
	   Set<Role> roles= new HashSet<>();
	   Role role = roleRepository.findByName(ERole.ROLE_TEACHER).get();
	   roles.add(role);
	   user.setRoles(roles);
	   userRepository.save(user);
	   
	    return new ResponseEntity<String>(HttpStatus.OK);
	  }

	@PutMapping(path="/editTeacher") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  editTeacher ( @RequestBody TeacherModel teacher)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

	    
	    adminService.editTeachers(teacher);
	   
	    return new ResponseEntity<String>(HttpStatus.OK);
	  }

	@GetMapping(path = "/departments")
	public @ResponseBody Iterable<Teacher_Department> getAllTeacherDepartment() {
		// This returns a JSON or XML with the users
		return adminService.getAllTeacher_Department();
		
		  }
	@PostMapping(path="/addDepartments") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  addNewDepartment ( @RequestBody DepartmentModel Teacher_Department)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

		Teacher_Department departmentEntity = new Teacher_Department();

		departmentEntity.setDepartment(Teacher_Department.getDepartment());
		
	    
	    adminService.saveDepartments(departmentEntity);
	   
	    return new ResponseEntity<String>(HttpStatus.OK);
	}
	@PutMapping(path="/editDepartment") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  editDepartment ( @RequestBody DepartmentModel Teacher_Department)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

	    
	    adminService.editDepartment(Teacher_Department);
	   
	    return new ResponseEntity<String>(HttpStatus.OK);
	  }

	
	@GetMapping(path = "/designation")
	public @ResponseBody Iterable<Teacher_Designation> getAllTeacherDesignation() {
		// This returns a JSON or XML with the users
		return adminService.getAllTeacher_Designation();
	}
	@PostMapping(path="/addDesignations") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  addNewDesignation ( @RequestBody DesignationModel Designation)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

		Teacher_Designation designationEntity = new Teacher_Designation();

		designationEntity.setDesignation(Designation.getDesignation());
		
	    
	    adminService.saveDesignations(designationEntity);
	   
	    return new ResponseEntity<String>(HttpStatus.OK);
	}
	@PutMapping(path="/editDesignation") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  editDesignation ( @RequestBody DesignationModel Designation)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

	    
	    adminService.editDesignation(Designation);
	   
	    return new ResponseEntity<String>(HttpStatus.OK);
	  }
	@GetMapping(path = "/courses")
	public @ResponseBody Iterable<Courses> getAllCourses() {
		// This returns a JSON or XML with the users
		return adminService.getAllCourses();
		
		  }
	@PostMapping(path="/addCourses") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  addNewCourse ( @RequestBody CourseModel Courses)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

		Courses courseEntity = new Courses();

		courseEntity.setCourse(Courses.getCourse());
		
	    
	    adminService.saveCourses(courseEntity);
	   
	    return new ResponseEntity<String>(HttpStatus.OK);
	}
	@PutMapping(path="/editCourse") // Map ONLY POST Requests
	  public @ResponseBody ResponseEntity<String>  editCourse ( @RequestBody CourseModel Courses)   {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

	    
	    adminService.editCourse(Courses);
	   
	    return new ResponseEntity<String>(HttpStatus.OK);
	  }

	


}
